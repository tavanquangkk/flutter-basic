syntax = "proto3";

package discount.v1;

option java_outer_classname = "DiscountProto";
option java_package = "jp.co.net.trial.shinise.grpc";

service DiscountService {
  rpc SetBluetoothLog(SetBluetoothLogRequest) returns (SetBluetoothLogResponse);

   // 商品情報取得(内税・外税対応）
  rpc GetProductInfo(GetProductInfoRequest) returns (GetProductInfoResponse);
  // 画面初期化時の印刷方法などのデフォルト設定を取得する
  rpc GetDefaultConfig2(GetDefaultConfig2Request) returns (GetDefaultConfig2Response);


  rpc InsertDiscountLabelLog(InsertDiscountLabelLogRequest) returns (InsertDiscountLabelLogResponse);

  rpc GetDefaultConfig(GetDefaultConfigRequest) returns (GetDefaultConfigResponse);

  rpc UpdateDefaultConfig(UpdateDefaultConfigRequest) returns (UpdateDefaultConfigResponse);
}

enum DiscountMode {
  DISCOUNT_MODE_UNSPECIFIED = 0;
  DISCOUNT_MODE_AFTER = 1;
  DISCOUNT_MODE_AMOUNT = 2;
  DISCOUNT_MODE_PERCENT = 3;
}

message SetBluetoothLogRequest {
  optional string printer_mac_address = 1;
  optional string store_code = 2;
}

message SetBluetoothLogResponse {
  optional string code = 1;
  optional string message = 2;
}


message GetProductInfoRequest {
  // 店舗コード
  optional string store_code = 1;
  // 商品コード
  optional string product_code = 2;
}

message GetProductInfoResponse {
  optional string code = 1;
  optional string message = 2;

  // Table0.row
  // 商品名、売価など
  repeated Product products = 3;

  // Table1.row
  // 最大値引率
  repeated Discount discounts = 4;

  // Table2.row
  // 部門、値引き禁止/可能 など
  repeated ProductStatus product_statuses = 5;

  // 税区分の値によらず、sale_priceは税込の売価が返される
  message Product {
    // 税込価格
    optional int32 sales_price = 1;
    // 商品コード
    optional string product_code = 2;
    // 商品名
    optional string product_name = 3;
    // 消費税率
    optional double tax_rate = 4;
    // 税区分
    optional common.v2.TaxType tax_type = 5;
    // 税抜価格
    optional int32 base_price = 6;
  }

  message Discount {
    // 最大値引率
    optional string discount_rate_limit = 1;
  }

  message ProductStatus {
    // 商品コード
    optional string product_code = 1;
    // 部門コード
    optional string department_code = 2;
    // 値下げ禁止か
    optional bool refused_discount = 3;
  }

}

message GetDefaultConfig2Request {
  // 店舗コード
  optional string store_code = 1;
}

message GetDefaultConfig2Response {
  optional string code = 1;
  optional string message = 2;

  // 既存API Table0の内容
  // 従業員コード
  optional string employee_code = 3;
  // 店舗コード
  optional int32 store_code = 4;
  // ラベルの見出しのID
  optional string label_title_id = 5;
  // ラベルの見出しの内容
  // e.g. タイムサービス品
  optional string label_title = 6;
  // 値下方法
  optional discount.v1.DiscountMode discount_mode = 7;
  // 明細ID
  optional string discount_detail_id = 8;
  // スキャン時にすぐ印刷するか
  // 1=on, 2=off
  optional bool on_scan_print = 9;
  // オフラインモードかどうか
  // 2=true , 1=false
  optional bool allow_offline = 10;
  // プリンターID
  optional int32 printer_id = 11;
  // プリンターMACアドレス
  optional string printer_mac_address = 12;
  // POPの有無
  // 1 = true, empty or 0 = false
  optional bool is_pop = 13;

  // Table1.row
  repeated DiscountDetail discount_details = 14;

  // Table3.row
  repeated Reason reasons = 16;

  // 外税対応店舗であるか
  // 既存API:
  // 1 → true（外税表示）
  // 0 → false（税込表示）
  optional bool is_tax_exclusive = 17;

  // 最大値下率または、値引額のリストが返る
  //
  // 値下方法が、値下後価格、値下率の場合に最大値下率を1つだけ返す。
  // 最大値下率が50％の場合, `discount_detail = 50`
  // 値下方法が、値下額の場合に値下額の一覧を返す
  // 値下額が10円の場合, `discount_detail=10`
  message DiscountDetail {
    // 連番のID
    optional int32 discount_detail_id = 1;
    // 最大値下率 or 値下額
    optional int32 discount_detail = 2;
    // 当日の日付
    optional string print_date = 3;
  }

  message Reason {
    // 値引理由のID
    optional int32 reason_code = 1;
    // 値引理由
    // e.g. 賞味期限間近
    optional string reason_name = 2;
  }
}





message InsertDiscountLabelLogRequest {
  optional string store_code = 1;
  optional string product_code = 2;
  optional DiscountMode discount_mode = 3;
  optional int32 original_price = 4;
  optional int32 discounted_price = 5;
  // 1=true ,0=false
  optional bool is_pop = 6;
  optional int32 label_count = 7;
  optional string reason_code = 8;
}

message InsertDiscountLabelLogResponse {
  optional string code = 1;
  optional string message = 2;
}

message GetDefaultConfigRequest {
  optional string store_code = 1;
}

message GetDefaultConfigResponse {
  optional string code = 1;
  optional string message = 2;

  // Table0.row
  repeated PrinterStatus printer_statuses = 3;

  // Table1.row
  repeated Label labels = 4;

  // Table2.row
  repeated Printer printers = 5 [deprecated = true];

  message PrinterStatus {
    optional string employee_code = 1;
    optional int32 store_code = 2;
    optional string label_title_id = 3;
    optional string label_title = 4;
    optional DiscountMode discount_mode = 5;
    optional string discount_detail_id = 6;
    // 1=on, 2=off
    optional bool on_scan_print = 7;

    // 2=true , 1=false
    optional bool allow_offline = 8;
    optional int32 printer_id = 9;
    optional string printer_mac_address = 10;
    // 1 = true, empty or 0 = false
    optional bool is_pop = 11;
  }

  message Label {
    optional string label_title_id = 1;
    optional string label_title = 2;
  }

  // 以下は空のListを返していたので、deprecatedにしている
  message Printer {
    optional int32 printer_id = 1 [deprecated = true];
    optional string printer_mac_address = 2 [deprecated = true];
  }
}

message UpdateDefaultConfigRequest {
  optional string store_code = 1;
  optional string label_title_id = 2;
  optional DiscountMode discount_mode = 3;
  // 1=on, 2=off
  optional bool on_scan_print = 4;
  // 2=true, 1=false
  optional bool allow_offline = 5;
  optional string printer_id = 6;
}

message UpdateDefaultConfigResponse {
  optional string code = 1;
  optional string message = 2;
}